name: Java CI/CD Pipeline

on:
  push:
    branches:
      - "feature"
      - "main"
  pull_request:
    branches:
      - "main"

permissions:
  id-token: write
  actions: write
  contents: write

env:
  ACR_LOGIN_SERVER: javaapplicationacr.azurecr.io
  IMAGE_NAME: java-app
  HELM_VALUES_FILE: javaapp/values.yaml

jobs:
  feature-tests:
    if: github.ref == 'refs/heads/feature'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Compile
        run: mvn compile --batch-mode

      - name: Lint with Checkstyle
        run: mvn checkstyle:check --batch-mode

      - name: Static Code Analysis (SpotBugs)
        run: mvn com.github.spotbugs:spotbugs-maven-plugin:check --batch-mode

      - name: Run Unit Tests
        run: mvn test --batch-mode

      - name: Run Integration Tests
        run: mvn verify --batch-mode

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --severity-threshold=high

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Build artifact
        run: mvn package --batch-mode

  publish-image:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Build artifact (Jar) without tests
        run: mvn clean install -DskipTests --batch-mode

      - name: Verify JAR exists
        run: ls -lh target/*.jar

      - name: Set Docker image tag to short SHA
        run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ env.IMAGE_TAG }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: table
          exit-code: 0
          severity: "CRITICAL,HIGH"

      - name: Login to Azure Container Registry (ACR)
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Push Docker image to ACR
        run: |
          docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ env.IMAGE_TAG }}

      - name: Clean up Docker images
        run: docker rmi $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ env.IMAGE_TAG }}

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Update Helm values.yaml with yq
        run: |
          yq e '.deployment.image.repository = "${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}"' -i $HELM_VALUES_FILE
          yq e '.deployment.image.tag = "${{ env.IMAGE_TAG }}"' -i $HELM_VALUES_FILE

      - name: Verify updated values.yaml
        run: cat $HELM_VALUES_FILE

      - name: Commit and push Helm update to main branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout main
          git add $HELM_VALUES_FILE
          git commit -m "chore: update image tag to ${{ env.IMAGE_TAG }} in helm values.yaml"
          git push origin HEAD:main
